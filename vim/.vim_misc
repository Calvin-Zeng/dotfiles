" refer to http://wiki.csie.ncku.edu.tw/vim/vimrc
filetype on
filetype plugin on

" It's must be here.
set t_Co=256

" Set tag file path for ctags.
" Use vim-ctags before type command "ctags -f .ctags -R ./" in source code directory.
" set tags=./tags,tags;
set tags=tags
set tags+=.tags

" Enable the backspace in insert mode, compatible with version 5.4 and earlier.
set backspace=indent,eol,start

" Highlight the cursor - The cursor on current line will highlight.
set cursorline
hi CursorLine cterm=none ctermbg=DarkGrey ctermfg=White

" Highlight the search string.
set hlsearch
hi Search cterm=reverse ctermbg=none ctermfg=none

" Highlight the search string even the typing is not finished.
set incsearch

" File encoding priority.
set fileencodings=utf-8,utf-16,big5,gb2312,gbk,gb18030,euc-jp,euc-kr,latin1

" Set the environment is utf-8.
set encoding=utf-8

" Show line number.
set nu

" Show relative number
set rnu 

" Auto indent.
set ai
set autoindent

" Typing TAB will convert to the space, It's according to the :set tabstop=x
set expandtab

" After the expandtab, press the TAB will convert to the X spaces.
set softtabstop=4

" Show the TAB is How many the spaces.
set tabstop=4

" indent width for visual
set shiftwidth=4

set wrap

" Enable the TAB with :command autocompletion.
set wildmode=longest,list

" Enable the mouse.
set mouse=a

" Enable the confirm feature.
set confirm

" Show the bottom status bar
" refer to https://www.reddit.com/r/vim/comments/pq3xwa/how_to_get_the_git_branch_in_the_statusline
"          https://shapeshed.com/vim-statuslines/
"          https://gist.github.com/meskarune/57b613907ebd1df67eb7bdb83c6e6641#file-vimrc-L33
au InsertEnter * hi statusline guifg=black guibg=#d7afff ctermfg=black ctermbg=magenta
au InsertLeave * hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan
au VimEnter,BufRead * hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan
au VimEnter,BufRead * hi filepath cterm=none ctermbg=238 ctermfg=40
au VimEnter,BufRead * hi filetype cterm=none ctermbg=238 ctermfg=45
au VimEnter,BufRead * hi filesize cterm=none ctermbg=238 ctermfg=225
au VimEnter,BufRead * hi position cterm=none ctermbg=238 ctermfg=228
au VimEnter,BufRead * hi gitbranch cterm=none ctermbg=238 ctermfg=255

" Status Line Custom
let g:currentmode={
    \ 'n'  : 'Normal',
    \ 'no' : 'Normal·Operator Pending',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ "\<C-V>" : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ "\<C-S>" : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

set laststatus=2
" File path string - '%:p'
set statusline=%#filepath#[%{expand(@%)}]
set statusline+=%#filetype#[%{strlen(&fenc)?&fenc:&enc},\ %{&ff},\ %{strlen(&filetype)?&filetype:'plain'}]
set statusline+=%#filesize#%{FileSize()}
set statusline+=%{IsBinary()}
set statusline+=%#gitbranch#%{StatuslineGit()}
set statusline+=%=
set statusline+=%{Servername()}
set statusline+=\ %#position#
set statusline+=%c,%l/%L
set statusline+=\ [%3p%%]
set statusline+=%0*\ %{toupper(g:currentmode[mode()])}\  " The current mode

function IsBinary()
    if (&binary == 0)
        return ""
    else
        return "[Binary]"
    endif
endfunction
function FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return "[Empty]"
    endif
    if bytes < 1024
        return "[" . bytes . "B]"
    elseif bytes < 1048576
        return "[" . (bytes / 1024) . "KB]"
    else
        return "[" . (bytes / 1048576) . "MB]"
    endif
endfunction
function! Servername()
    return strlen(v:servername) > 0?'[ '.v:servername.' ]':''
endfunction

" Git branch information.
function! StatuslineGit()
    return strlen(b:git_branch) > 0?'  ~('.b:git_branch.')':''
endfunction
function GitBranch()
    "return trim(system("git -C " . expand("%:h") . " branch --show-current 2>/dev/null"))
    return trim(system("git rev-parse --abbrev-ref HEAD 2>/dev/null"))
endfunction
augroup Gitget
    autocmd!
    autocmd VimEnter * let b:git_branch = GitBranch()
    autocmd BufRead * let b:git_branch = GitBranch()
    autocmd BufEnter * let b:git_branch = GitBranch()
augroup END
